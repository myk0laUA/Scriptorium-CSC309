import { PrismaClient } from '@prisma/client';

import bcrypt from 'bcrypt';

const prisma = new PrismaClient();


const availableAvatars = [
  '/avatars/avatar1.png',
  '/avatars/avatar2.png',
  '/avatars/avatar3.png',
  '/avatars/avatar4.png',
  '/avatars/avatar5.png',
];

// Creates a new user
export default async function handler(req, res) {

    if (req.method === "POST") {
        
        const { username, firstName, lastName, email, password, avatar, phoneNum, role } = req.body;

        if (!username || !firstName || !lastName || !email || !password || !phoneNum) {
            return res.status(400).json({ error: 'All fields required'});
        }

        const existingUser = await prisma.user.findUnique({
            where: { username },
        });

        if (existingUser) {
            return res.status(400).json({ error: 'User already exists'});

        }

        // ensures that if a role is provided, it matches either USER or ADMIN
        if (role && role !== "USER" && role !== "ADMIN") {
            return res.status(400).json({ error: 'Invalid role'});
        }

        // ensures that if an avatar is provided, it matches an existing stored avatar
        if (avatar && !avaliableAvatars.includes(avatar)) {
            return res.status(400).json({ error: 'Invalid avatar. Choose one of 3 available avatars: http://localhost:3000/avatars/avatar1.png, http://localhost:3000/avatars/avatar2.png, http://localhost:3000/avatars/avatar3.png. You can also choose to have no avatar.' });
        }

        // ensures email and phone numbers are unique (generated by ChatGPT)
        const existingEmail = await prisma.user.findUnique({
            where: { email },
        });
        if (existingEmail) {
            return res.status(400).json({ error: 'Email already exists' });
        }
        const existingPhoneNumber = await prisma.user.findUnique({
            where: { phoneNum },
        });
        if (existingPhoneNumber) {
            return res.status(400).json({ error: 'Phone number already exists' });
        }

        // hashes password
        const hashedPassword = await bcrypt.hash(password, 10);

        const user = await prisma.user.create({
            data: {
                username,
                firstName,
                lastName,
                email,
                password: hashedPassword,
                avatar,
                phoneNum,
                role,
            }
        })
        // Don't return password hash
        return res.status(201).json({ ...user, password: undefined });


    } else {
        res.status(405).json({ error: "Method not allowed" });
    
    }

}